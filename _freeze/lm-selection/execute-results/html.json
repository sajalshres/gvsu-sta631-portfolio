{
  "hash": "2048b8b753af5e06424836de7f458bfa",
  "result": {
    "markdown": "---\ntitle: \"Ch6-varselect-lab\"\njupyter:\n  jupytext:\n    formats: ipynb,Rmd\n    text_representation:\n      extension: .Rmd\n      format_name: rmarkdown\n      format_version: '1.2'\n      jupytext_version: 1.11.2\n  kernelspec:\n    display_name: R\n    language: R\n    name: ir\n---\n\n\n\n# Lab: Linear Models and Regularization Methods\n## Subset Selection Methods\n\n### Best Subset Selection\n\n\nHere we apply the best subset selection approach to the `Hitters` data.\nWe wish to predict a baseball player's `Salary` on the basis of various statistics associated with performance in the previous year.\n\nFirst of all, we note that the `Salary` variable is missing for some of the players.  The `is.na()` function can be used to identify the missing observations. It returns a vector of the same length as the input vector, with a `TRUE` for any elements that are missing, and a `FALSE` for non-missing elements.\n The `sum()` function can then be used to count all of the missing elements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ISLR2)\nnames(Hitters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"AtBat\"     \"Hits\"      \"HmRun\"     \"Runs\"      \"RBI\"       \"Walks\"    \n [7] \"Years\"     \"CAtBat\"    \"CHits\"     \"CHmRun\"    \"CRuns\"     \"CRBI\"     \n[13] \"CWalks\"    \"League\"    \"Division\"  \"PutOuts\"   \"Assists\"   \"Errors\"   \n[19] \"Salary\"    \"NewLeague\"\n```\n:::\n\n```{.r .cell-code}\ndim(Hitters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 322  20\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(Hitters$Salary))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 59\n```\n:::\n:::\n\n\nHence we see that `Salary` is missing for $59$ players. The `na.omit()` function removes all of the rows that have missing values in any variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHitters <- na.omit(Hitters)\ndim(Hitters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 263  20\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(Hitters))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\nThe `regsubsets()` function (part of the `leaps` library) performs best subset selection by identifying the best model that contains a given number of predictors, where *best* is quantified using RSS. The syntax is the same as for `lm()`. The `summary()` command outputs the best set of variables for each model size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaps)\nregfit.full <- regsubsets(Salary ~ ., Hitters)\nsummary(regfit.full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., Hitters)\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 8\nSelection Algorithm: exhaustive\n         AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 ) \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n2  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n3  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n4  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n5  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n6  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n7  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \"*\"    \" \"   \" \" \n8  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \"*\"    \"*\"   \" \" \n         CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 ) \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 ) \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 ) \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n```\n:::\n:::\n\n\nAn asterisk indicates that a given variable is included in the corresponding model.\nFor instance, this output indicates that the best two-variable model contains only `Hits` and `CRBI`.\nBy default, `regsubsets()` only reports results up to the best eight-variable model. But the  `nvmax` option can be used in order to return as many variables as are desired. Here we fit up to a 19-variable model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregfit.full <- regsubsets(Salary ~ ., data = Hitters,\n    nvmax = 19)\nreg.summary <- summary(regfit.full)\n```\n:::\n\n\n\nThe `summary()` function also returns $R^2$, RSS, adjusted $R^2$, $C_p$, and BIC. We can examine these to try to select the *best* overall model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(reg.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"which\"  \"rsq\"    \"rss\"    \"adjr2\"  \"cp\"     \"bic\"    \"outmat\" \"obj\"   \n```\n:::\n:::\n\n\nFor instance, we see that the $R^2$ statistic increases from $32\\,\\%$, when only one variable is included in the model, to almost $55\\,\\%$, when all variables are included. As expected, the $R^2$ statistic increases monotonically as more variables are included.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg.summary$rsq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.3214501 0.4252237 0.4514294 0.4754067 0.4908036 0.5087146 0.5141227\n [8] 0.5285569 0.5346124 0.5404950 0.5426153 0.5436302 0.5444570 0.5452164\n[15] 0.5454692 0.5457656 0.5459518 0.5460945 0.5461159\n```\n:::\n:::\n\n\nPlotting RSS, adjusted $R^2$, $C_p$, and BIC for all of the models at once will help us decide which model to select. Note the `type = \"l\"` option tells `R` to connect the plotted points with lines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\nplot(reg.summary$rss, xlab = \"Number of Variables\",\n    ylab = \"RSS\", type = \"l\")\nplot(reg.summary$adjr2, xlab = \"Number of Variables\",\n    ylab = \"Adjusted RSq\", type = \"l\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk7-1.png){width=672}\n:::\n:::\n\n\nThe `points()` command works like the `plot()` command, except that it puts points on a plot that has already been created, instead of creating a new plot. The `which.max()` function can be used to identify the location of the maximum point of a vector. We will now plot a red dot to indicate the model with the largest adjusted $R^2$ statistic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(reg.summary$adjr2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\nplot(reg.summary$adjr2, xlab = \"Number of Variables\",\n    ylab = \"Adjusted RSq\", type = \"l\")\npoints(11, reg.summary$adjr2[11], col = \"red\", cex = 2, \n    pch = 20)\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk8-1.png){width=672}\n:::\n:::\n\n\nIn a similar fashion we can plot the $C_p$ and BIC statistics, and indicate the models with the smallest statistic using `which.min()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(reg.summary$cp, xlab = \"Number of Variables\",\n    ylab = \"Cp\", type = \"l\")\nwhich.min(reg.summary$cp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\npoints(10, reg.summary$cp[10], col = \"red\", cex = 2,\n    pch = 20)\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nwhich.min(reg.summary$bic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nplot(reg.summary$bic, xlab = \"Number of Variables\",\n    ylab = \"BIC\", type = \"l\")\npoints(6, reg.summary$bic[6], col = \"red\", cex = 2,\n    pch = 20)\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk9-2.png){width=672}\n:::\n:::\n\n\n\nThe `regsubsets()` function has a built-in `plot()` command which can be used to display the selected variables for the best model with a given number of predictors, ranked according to the BIC, $C_p$, adjusted $R^2$, or AIC.\nTo find out more about this function, type `?plot.regsubsets`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(regfit.full, scale = \"r2\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(regfit.full, scale = \"adjr2\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk10-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(regfit.full, scale = \"Cp\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk10-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(regfit.full, scale = \"bic\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk10-4.png){width=672}\n:::\n:::\n\n\nThe top row of each plot contains a black square for each variable selected according to the optimal model associated with that statistic. For instance, we see that several models share a BIC close to $-150$. However, the model with the lowest BIC is the six-variable model that contains only `AtBat`,\n`Hits`,  `Walks`, `CRBI`, `DivisionW`, and `PutOuts`.\nWe can use the `coef()` function to see the coefficient estimates associated with this model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(regfit.full, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        Walks         CRBI    DivisionW \n  91.5117981   -1.8685892    7.6043976    3.6976468    0.6430169 -122.9515338 \n     PutOuts \n   0.2643076 \n```\n:::\n:::\n\n\n\n\n\n\n### Forward and Backward Stepwise Selection\n \n\n\nWe can also use the `regsubsets()` function to perform forward stepwise or backward stepwise selection, using the argument `method = \"forward\"`\nor `method = \"backward\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregfit.fwd <- regsubsets(Salary ~ ., data = Hitters,\n    nvmax = 19, method = \"forward\")\nsummary(regfit.fwd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., data = Hitters, nvmax = 19, method = \"forward\")\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 19\nSelection Algorithm: forward\n          AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 )  \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n2  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n3  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n4  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n5  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n6  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n7  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n8  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \"*\" \n9  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n10  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n11  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n12  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n13  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n14  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n15  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n16  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n17  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n18  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n19  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \"*\"    \"*\"   \"*\" \n          CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n9  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n10  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n11  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n12  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n13  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n14  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n15  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n16  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n17  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n18  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n19  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n```\n:::\n\n```{.r .cell-code}\nregfit.bwd <- regsubsets(Salary ~ ., data = Hitters,\n    nvmax = 19, method = \"backward\")\nsummary(regfit.bwd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., data = Hitters, nvmax = 19, method = \"backward\")\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 19\nSelection Algorithm: backward\n          AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 )  \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n2  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n3  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n4  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n5  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n6  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n7  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n8  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \"*\" \n9  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n10  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n11  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n12  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n13  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n14  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n15  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n16  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n17  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n18  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n19  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \"*\"    \"*\"   \"*\" \n          CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n9  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n10  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n11  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n12  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n13  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n14  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n15  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n16  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n17  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n18  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n19  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n```\n:::\n:::\n\n\nFor instance, we see that using forward stepwise selection, the best one-variable model contains only `CRBI`, and the best two-variable model additionally includes `Hits`. For this data, the best one-variable through six-variable models are each identical for best subset and forward selection. However, the best seven-variable models identified by forward stepwise selection, backward stepwise selection, and best subset selection are different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(regfit.full, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)         Hits        Walks       CAtBat        CHits       CHmRun \n  79.4509472    1.2833513    3.2274264   -0.3752350    1.4957073    1.4420538 \n   DivisionW      PutOuts \n-129.9866432    0.2366813 \n```\n:::\n\n```{.r .cell-code}\ncoef(regfit.fwd, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        Walks         CRBI       CWalks \n 109.7873062   -1.9588851    7.4498772    4.9131401    0.8537622   -0.3053070 \n   DivisionW      PutOuts \n-127.1223928    0.2533404 \n```\n:::\n\n```{.r .cell-code}\ncoef(regfit.bwd, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        Walks        CRuns       CWalks \n 105.6487488   -1.9762838    6.7574914    6.0558691    1.1293095   -0.7163346 \n   DivisionW      PutOuts \n-116.1692169    0.3028847 \n```\n:::\n:::\n\n\n\n \n\n\n### Choosing Among Models Using the Validation-Set Approach and Cross-Validation\n\n\nWe just saw that it is possible to choose among a set of models of different sizes using $C_p$, BIC, and adjusted $R^2$. We will now consider how to do this using the\nvalidation set and cross-validation approaches.\n\nIn order for these approaches to yield accurate estimates of the test\nerror, we must use *only the training observations* to perform all aspects of model-fitting---including variable\n  selection.  Therefore, the determination of which model of a\ngiven size is best must be made using *only the training observations*. This point is subtle but important.\nIf the full data set is used to perform the best subset selection\nstep, the validation set errors and cross-validation errors that we\nobtain will not be accurate estimates of the test error.\n\nIn order to use the validation set approach, we begin by splitting the\nobservations into a training set and a test set.  We do this by creating a\nrandom vector, `train`, of elements equal to `TRUE` if the\ncorresponding observation is in the training set, and `FALSE`\notherwise.  The vector `test` has a `TRUE` if the\nobservation is in the test set, and a `FALSE` otherwise. Note\nthe `!` in the command to create `test` causes `TRUE`s to be\nswitched to `FALSE`s and vice versa. We also set a random seed\nso that the user will obtain the same training set/test set split.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ntrain <- sample(c(TRUE, FALSE), nrow(Hitters),\n    replace = TRUE)\ntest <- (!train)\n```\n:::\n\n\nNow, we apply `regsubsets()` to the training set in order to perform best subset selection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregfit.best <- regsubsets(Salary ~ .,\n    data = Hitters[train, ], nvmax = 19)\n```\n:::\n\n\nNotice that we subset the `Hitters` data frame directly in the call in order to access only the training subset of the data, using the expression `Hitters[train, ]`.\nWe now compute the validation set error for the best model of each model size. We first make a model matrix\nfrom the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest.mat <- model.matrix(Salary ~ ., data = Hitters[test, ])\n```\n:::\n\n\nThe\n`model.matrix()` function is used in many regression\npackages for building an ``X'' matrix from data.  Now we run a loop,\nand for each size `i`, we extract the coefficients from\n`regfit.best` for the best model of that size,  multiply them into\nthe appropriate columns of the test model matrix to form the\npredictions, and compute the test MSE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nval.errors <- rep(NA, 19)\nfor (i in 1:19) {\n coefi <- coef(regfit.best, id = i)\n pred <- test.mat[, names(coefi)] %*% coefi\n val.errors[i] <- mean((Hitters$Salary[test] - pred)^2)\n}\n```\n:::\n\n\nWe find that the best model is the one that contains seven variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nval.errors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 164377.3 144405.5 152175.7 145198.4 137902.1 139175.7 126849.0 136191.4\n [9] 132889.6 135434.9 136963.3 140694.9 140690.9 141951.2 141508.2 142164.4\n[17] 141767.4 142339.6 142238.2\n```\n:::\n\n```{.r .cell-code}\nwhich.min(val.errors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\ncoef(regfit.best, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        Walks        CRuns       CWalks \n  67.1085369   -2.1462987    7.0149547    8.0716640    1.2425113   -0.8337844 \n   DivisionW      PutOuts \n-118.4364998    0.2526925 \n```\n:::\n:::\n\n\n\nThis was a little tedious, partly because there is no `predict()` method for `regsubsets()`.\nSince we will be using this function again, we can capture our steps above and write our own predict method.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n predict.regsubsets <- function(object, newdata, id, ...) {\n  form <- as.formula(object$call[[2]])\n  mat <- model.matrix(form, newdata)\n  coefi <- coef(object, id = id)\n  xvars <- names(coefi)\n  mat[, xvars] %*% coefi\n }\n```\n:::\n\n\nOur function pretty much mimics what we did above. The only complex part is how we extracted the formula used in\nthe call to `regsubsets()`. We demonstrate how we use this function below, when we do cross-validation.\n\nFinally, we perform best subset selection on the full data set, and select the best seven-variable model. It is important that we make use of  the full data set in order to obtain more accurate coefficient estimates. Note that we perform best subset selection on the full data set and select the best seven-variable model, rather than simply using the variables that were obtained from the training set, because the best seven-variable model on the full data set may differ from the corresponding model on the training set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregfit.best <- regsubsets(Salary ~ ., data = Hitters,\n    nvmax = 19)\ncoef(regfit.best, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)         Hits        Walks       CAtBat        CHits       CHmRun \n  79.4509472    1.2833513    3.2274264   -0.3752350    1.4957073    1.4420538 \n   DivisionW      PutOuts \n-129.9866432    0.2366813 \n```\n:::\n:::\n\n\nIn fact, we see that the best seven-variable model on the full data set has a different set of variables than the best seven-variable model on the training set.\n\nWe now try to choose among the models of different sizes using cross-validation.\nThis approach is somewhat involved, as we  must perform best subset selection *within each of the $k$ training sets*.\nDespite this, we see that with its clever subsetting syntax, `R` makes this job quite easy.\n First, we create a  vector that allocates each observation to one of $k=10$ folds, and we create\na matrix in which we will store the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 10\nn <- nrow(Hitters)\nset.seed(1)\nfolds <- sample(rep(1:k, length = n))\ncv.errors <- matrix(NA, k, 19,\n    dimnames = list(NULL, paste(1:19)))\n```\n:::\n\n\nNow we write a for loop that performs cross-validation. In the $j$th fold, the elements of `folds` that equal `j` are in the test set, and the remainder are in the training set. We make our predictions for each model size (using our new\n`predict()` method), compute the test errors on the appropriate subset, and\nstore them in the appropriate slot in the matrix `cv.errors`. Note that in the following code `R` will automatically use our `predict.regsubsets()` function when we call `predict()` because the `best.fit` object has class `regsubsets`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (j in 1:k) {\n  best.fit <- regsubsets(Salary ~ .,\n       data = Hitters[folds != j, ],\n       nvmax = 19)\n  for (i in 1:19) {\n    pred <- predict(best.fit, Hitters[folds == j, ], id = i)\n    cv.errors[j, i] <-\n         mean((Hitters$Salary[folds == j] - pred)^2)\n   }\n }\n```\n:::\n\n\nThis has given us a $10 \\times 19$ matrix, of which the $(j,i)$th element  corresponds to the test MSE for the $j$th\ncross-validation fold for the best $i$-variable model. We use the `apply()` function to average over the columns of this matrix in order to obtain a vector for which the $i$th element is the cross-validation error for the $i$-variable model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean.cv.errors <- apply(cv.errors, 2, mean)\nmean.cv.errors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        2        3        4        5        6        7        8 \n143439.8 126817.0 134214.2 131782.9 130765.6 120382.9 121443.1 114363.7 \n       9       10       11       12       13       14       15       16 \n115163.1 109366.0 112738.5 113616.5 115557.6 115853.3 115630.6 116050.0 \n      17       18       19 \n116117.0 116419.3 116299.1 \n```\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\nplot(mean.cv.errors, type = \"b\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk23-1.png){width=672}\n:::\n:::\n\n\nWe see that cross-validation selects a 10-variable model. We now perform best subset selection on the full data set in order to obtain the 10-variable model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg.best <- regsubsets(Salary ~ ., data = Hitters,\n    nvmax = 19)\ncoef(reg.best, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        Walks       CAtBat        CRuns \n 162.5354420   -2.1686501    6.9180175    5.7732246   -0.1300798    1.4082490 \n        CRBI       CWalks    DivisionW      PutOuts      Assists \n   0.7743122   -0.8308264 -112.3800575    0.2973726    0.2831680 \n```\n:::\n:::\n\n\n\n\n\n## Ridge Regression and the Lasso\n\nWe will use the `glmnet` package in order to perform ridge regression and the lasso.\nThe main function in this package is `glmnet()`, which can be used to fit ridge regression models, lasso models, and more.\nThis function has slightly different syntax from other model-fitting functions that we have encountered thus far in this book. In particular, we must pass in an `x` matrix as well as a `y` vector, and we do not use the {\\R{y $\\sim$ x}} syntax. We will now perform ridge regression and the lasso in order to predict `Salary` on the `Hitters` data. Before proceeding ensure that the missing values have been removed from the data, as described in Section 6.5.1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- model.matrix(Salary ~ ., Hitters)[, -1]\ny <- Hitters$Salary\n```\n:::\n\n\nThe `model.matrix()` function is particularly useful for creating `x`; not only does it produce a matrix corresponding to the $19$ predictors but it also automatically transforms any qualitative variables into dummy variables. The latter property is important because `glmnet()` can only take numerical, quantitative inputs.\n\n### Ridge Regression\n\nThe `glmnet()` function has an `alpha` argument that determines what type of model is fit. If `alpha=0` then a ridge regression model is fit, and if `alpha=1`\nthen a lasso model is fit. We first fit a ridge regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glmnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Matrix\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoaded glmnet 4.1-7\n```\n:::\n\n```{.r .cell-code}\ngrid <- 10^seq(10, -2, length = 100)\nridge.mod <- glmnet(x, y, alpha = 0, lambda = grid)\n```\n:::\n\n\nBy default the `glmnet()` function performs ridge regression for an automatically selected range of $\\lambda$ values. However, here we have chosen to implement the function over a grid of values ranging from $\\lambda=10^{10}$ to $\\lambda=10^{-2}$, essentially covering the full range of scenarios from the null model containing only the intercept, to the least squares fit. As we will see, we can also compute model fits for a particular value of $\\lambda$ that is not one of the original `grid` values. Note that by default, the `glmnet()` function standardizes the variables so that they are on the same scale. To turn off this default setting, use the argument `standardize = FALSE`.\n\nAssociated with each value of $\\lambda$ is a vector of ridge regression coefficients, stored in a matrix that can be accessed by `coef()`. In this case, it is a $20 \\times 100$\nmatrix, with $20$ rows (one for each predictor, plus an intercept) and $100$ columns (one for each value of $\\lambda$).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(coef(ridge.mod))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  20 100\n```\n:::\n:::\n\n\nWe expect the coefficient estimates to be much smaller, in terms of $\\ell_2$ norm, when a large value of $\\lambda$ is used, as compared to when a small value of\n$\\lambda$ is used. These are the coefficients when $\\lambda=11{,}498$, along with their $\\ell_2$ norm:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge.mod$lambda[50]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11497.57\n```\n:::\n\n```{.r .cell-code}\ncoef(ridge.mod)[, 50]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (Intercept)         AtBat          Hits         HmRun          Runs \n407.356050200   0.036957182   0.138180344   0.524629976   0.230701523 \n          RBI         Walks         Years        CAtBat         CHits \n  0.239841459   0.289618741   1.107702929   0.003131815   0.011653637 \n       CHmRun         CRuns          CRBI        CWalks       LeagueN \n  0.087545670   0.023379882   0.024138320   0.025015421   0.085028114 \n    DivisionW       PutOuts       Assists        Errors    NewLeagueN \n -6.215440973   0.016482577   0.002612988  -0.020502690   0.301433531 \n```\n:::\n\n```{.r .cell-code}\nsqrt(sum(coef(ridge.mod)[-1, 50]^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.360612\n```\n:::\n:::\n\n\nIn contrast, here are the coefficients when $\\lambda=705$, along with their $\\ell_2$ norm. Note the much larger $\\ell_2$ norm of the coefficients associated with this smaller value of $\\lambda$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge.mod$lambda[60]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 705.4802\n```\n:::\n\n```{.r .cell-code}\ncoef(ridge.mod)[, 60]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        HmRun         Runs          RBI \n 54.32519950   0.11211115   0.65622409   1.17980910   0.93769713   0.84718546 \n       Walks        Years       CAtBat        CHits       CHmRun        CRuns \n  1.31987948   2.59640425   0.01083413   0.04674557   0.33777318   0.09355528 \n        CRBI       CWalks      LeagueN    DivisionW      PutOuts      Assists \n  0.09780402   0.07189612  13.68370191 -54.65877750   0.11852289   0.01606037 \n      Errors   NewLeagueN \n -0.70358655   8.61181213 \n```\n:::\n\n```{.r .cell-code}\nsqrt(sum(coef(ridge.mod)[-1, 60]^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57.11001\n```\n:::\n:::\n\n\nWe can use the `predict()` function for a number of purposes. For instance, we can obtain the ridge regression coefficients for a new value of $\\lambda$, say $50$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(ridge.mod, s = 50, type = \"coefficients\")[1:20, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (Intercept)         AtBat          Hits         HmRun          Runs \n 4.876610e+01 -3.580999e-01  1.969359e+00 -1.278248e+00  1.145892e+00 \n          RBI         Walks         Years        CAtBat         CHits \n 8.038292e-01  2.716186e+00 -6.218319e+00  5.447837e-03  1.064895e-01 \n       CHmRun         CRuns          CRBI        CWalks       LeagueN \n 6.244860e-01  2.214985e-01  2.186914e-01 -1.500245e-01  4.592589e+01 \n    DivisionW       PutOuts       Assists        Errors    NewLeagueN \n-1.182011e+02  2.502322e-01  1.215665e-01 -3.278600e+00 -9.496680e+00 \n```\n:::\n:::\n\n\n\nWe  now split the samples into a training set and a test set in order to estimate the test error of ridge regression and the lasso. There are two common ways to randomly split a data set. The first is to produce a random vector of `TRUE`, `FALSE` elements and select the observations corresponding to `TRUE` for the training data. The second is to randomly choose a subset of numbers between $1$ and $n$; these can then be used as the indices for the training observations. The two approaches work equally well. We used the former method in Section 6.5.1. Here we demonstrate the latter approach.\n\nWe first set a random seed so that the results obtained will be reproducible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ntrain <- sample(1:nrow(x), nrow(x) / 2)\ntest <- (-train)\ny.test <- y[test]\n```\n:::\n\n\nNext we fit a ridge regression model on the training set, and evaluate its MSE on the test set, using $\\lambda=4$.  Note the use of the `predict()` function again. This time we get predictions for a test set, by replacing `type=\"coefficients\"` with the `newx` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge.mod <- glmnet(x[train, ], y[train], alpha = 0,\n    lambda = grid, thresh = 1e-12)\nridge.pred <- predict(ridge.mod, s = 4, newx = x[test, ])\nmean((ridge.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 142199.2\n```\n:::\n:::\n\n\nThe test MSE is $142{,}199$.\nNote that if we had instead simply fit a model with just an intercept, we would have predicted each test observation using the mean of the training observations. In that case, we could compute the test set MSE like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean((mean(y[train]) - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 224669.9\n```\n:::\n:::\n\n\nWe could also get the same result by fitting a ridge regression model with a *very* large value of $\\lambda$. Note that `1e10` means $10^{10}$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge.pred <- predict(ridge.mod, s = 1e10, newx = x[test, ])\nmean((ridge.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 224669.8\n```\n:::\n:::\n\n\nSo fitting a ridge regression model with $\\lambda=4$ leads to a much lower test MSE than fitting a model with just an intercept.\nWe now check whether there is any benefit to performing ridge regression with $\\lambda=4$ instead of just performing least squares regression. Recall that least squares is simply ridge regression with $\\lambda=0$.\\footnote{In order for `glmnet()` to yield the exact least squares coefficients when $\\lambda=0$, we use the argument `exact = T` when calling the `predict()` function. Otherwise, the `predict()` function will interpolate over the grid of $\\lambda$ values used in fitting\nthe `glmnet()` model, yielding approximate results. When we use `exact = T`, there remains a slight discrepancy in the third decimal place between the output of `glmnet()` when $\\lambda = 0$ and the output of `lm()`; this  is due to numerical approximation on the part of `glmnet()`.}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge.pred <- predict(ridge.mod, s = 0, newx = x[test, ],\n    exact = T, x = x[train, ], y = y[train])\nmean((ridge.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 168588.6\n```\n:::\n\n```{.r .cell-code}\nlm(y ~ x, subset = train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x, subset = train)\n\nCoefficients:\n(Intercept)       xAtBat        xHits       xHmRun        xRuns         xRBI  \n   274.0145      -0.3521      -1.6377       5.8145       1.5424       1.1243  \n     xWalks       xYears      xCAtBat       xCHits      xCHmRun       xCRuns  \n     3.7287     -16.3773      -0.6412       3.1632       3.4008      -0.9739  \n      xCRBI      xCWalks     xLeagueN   xDivisionW     xPutOuts     xAssists  \n    -0.6005       0.3379     119.1486    -144.0831       0.1976       0.6804  \n    xErrors  xNewLeagueN  \n    -4.7128     -71.0951  \n```\n:::\n\n```{.r .cell-code}\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\",\n    x = x[train, ], y = y[train])[1:20, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        HmRun         Runs          RBI \n 274.0200994   -0.3521900   -1.6371383    5.8146692    1.5423361    1.1241837 \n       Walks        Years       CAtBat        CHits       CHmRun        CRuns \n   3.7288406  -16.3795195   -0.6411235    3.1629444    3.4005281   -0.9739405 \n        CRBI       CWalks      LeagueN    DivisionW      PutOuts      Assists \n  -0.6003976    0.3378422  119.1434637 -144.0853061    0.1976300    0.6804200 \n      Errors   NewLeagueN \n  -4.7127879  -71.0898914 \n```\n:::\n:::\n\n\nIn general,  if we want to fit a (unpenalized) least squares model, then we should use the `lm()` function, since that function provides more useful outputs, such as standard errors and p-values for the coefficients.\n\nIn general, instead of arbitrarily choosing $\\lambda=4$, it would be better to use cross-validation to choose the tuning parameter $\\lambda$.\nWe can do this using the built-in cross-validation function, `cv.glmnet()`.  By default, the function performs ten-fold cross-validation, though this can be changed using the argument `nfolds`. Note that we set a random seed first so our results will be reproducible, since the choice of the cross-validation folds is random.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ncv.out <- cv.glmnet(x[train, ], y[train], alpha = 0)\nplot(cv.out)\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk36-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbestlam <- cv.out$lambda.min\nbestlam\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 326.0828\n```\n:::\n:::\n\n\nTherefore, we see that the value of $\\lambda$ that results in the smallest cross-validation error is $326$. What is the test MSE associated with this value of $\\lambda$?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge.pred <- predict(ridge.mod, s = bestlam,\n    newx = x[test, ])\nmean((ridge.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 139856.6\n```\n:::\n:::\n\n\nThis represents a further improvement over the test MSE that we got using $\\lambda=4$.\nFinally, we refit our ridge regression model on the full data set, using the value of $\\lambda$ chosen by cross-validation, and examine the coefficient estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- glmnet(x, y, alpha = 0)\npredict(out, type = \"coefficients\", s = bestlam)[1:20, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)        AtBat         Hits        HmRun         Runs          RBI \n 15.44383120   0.07715547   0.85911582   0.60103106   1.06369007   0.87936105 \n       Walks        Years       CAtBat        CHits       CHmRun        CRuns \n  1.62444617   1.35254778   0.01134999   0.05746654   0.40680157   0.11456224 \n        CRBI       CWalks      LeagueN    DivisionW      PutOuts      Assists \n  0.12116504   0.05299202  22.09143197 -79.04032656   0.16619903   0.02941950 \n      Errors   NewLeagueN \n -1.36092945   9.12487765 \n```\n:::\n:::\n\n\nAs expected, none of the coefficients are zero---ridge regression does not perform variable selection!\n\n### The Lasso\n\nWe saw that ridge regression with a wise choice of $\\lambda$ can outperform least squares as well as the null model on the `Hitters` data set. We now ask whether the lasso can yield either\na more accurate or a more interpretable model than ridge regression. In order to fit a lasso model, we once again use the `glmnet()` function; however, this time we\nuse the argument\n`alpha=1`. Other than that change, we proceed just as we did in fitting a ridge model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso.mod <- glmnet(x[train, ], y[train], alpha = 1,\n    lambda = grid)\nplot(lasso.mod)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in regularize.values(x, y, ties, missing(ties), na.rm = na.rm):\ncollapsing to unique 'x' values\n```\n:::\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk39-1.png){width=672}\n:::\n:::\n\n\nWe can see from the coefficient plot that depending on the choice of tuning parameter, some of the coefficients will be exactly equal to zero.\nWe now perform cross-validation and compute the associated test error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ncv.out <- cv.glmnet(x[train, ], y[train], alpha = 1)\nplot(cv.out)\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk40-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbestlam <- cv.out$lambda.min\nlasso.pred <- predict(lasso.mod, s = bestlam,\n    newx = x[test, ])\nmean((lasso.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 143673.6\n```\n:::\n:::\n\n\nThis is substantially lower than the test set MSE of the null model and of least squares, and very similar to the test MSE of ridge regression with $\\lambda$ chosen by cross-validation.\n\nHowever, the lasso has a substantial advantage over ridge regression in that the resulting coefficient estimates are sparse. Here we see that 8 of the 19 coefficient estimates are exactly\nzero. So the lasso model with $\\lambda$ chosen by cross-validation contains only eleven variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- glmnet(x, y, alpha = 1, lambda = grid)\nlasso.coef <- predict(out, type = \"coefficients\",\n    s = bestlam)[1:20, ]\nlasso.coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (Intercept)         AtBat          Hits         HmRun          Runs \n   1.27479059   -0.05497143    2.18034583    0.00000000    0.00000000 \n          RBI         Walks         Years        CAtBat         CHits \n   0.00000000    2.29192406   -0.33806109    0.00000000    0.00000000 \n       CHmRun         CRuns          CRBI        CWalks       LeagueN \n   0.02825013    0.21628385    0.41712537    0.00000000   20.28615023 \n    DivisionW       PutOuts       Assists        Errors    NewLeagueN \n-116.16755870    0.23752385    0.00000000   -0.85629148    0.00000000 \n```\n:::\n\n```{.r .cell-code}\nlasso.coef[lasso.coef != 0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (Intercept)         AtBat          Hits         Walks         Years \n   1.27479059   -0.05497143    2.18034583    2.29192406   -0.33806109 \n       CHmRun         CRuns          CRBI       LeagueN     DivisionW \n   0.02825013    0.21628385    0.41712537   20.28615023 -116.16755870 \n      PutOuts        Errors \n   0.23752385   -0.85629148 \n```\n:::\n:::\n\n\n\n\n## PCR and PLS Regression\n\n### Principal Components Regression\n\n\nPrincipal components regression (PCR) can be performed using the `pcr()` function, which is part of the `pls` library. We now apply PCR to the `Hitters` data, in order to predict `Salary`. Again,\n we ensure that the missing values have been removed from the data, as described in Section 6.5.1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pls)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'pls'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    loadings\n```\n:::\n\n```{.r .cell-code}\nset.seed(2)\npcr.fit <- pcr(Salary ~ ., data = Hitters, scale = TRUE,\n    validation = \"CV\")\n```\n:::\n\n\nThe syntax for the `pcr()` function is similar to that for `lm()`, with a few additional\noptions. Setting `scale = TRUE` has the effect of *standardizing* each\npredictor, using ( 6.6), prior to generating the principal\ncomponents, so that the scale on which each variable is measured will not have an effect.\n Setting `validation = \"CV\"` causes\n`pcr()` to compute the ten-fold cross-validation error for each possible\nvalue of $M$, the number of principal components used. The resulting fit can be examined using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pcr.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 263 19 \n\tY dimension: 263 1\nFit method: svdpc\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV             452    351.9    353.2    355.0    352.8    348.4    343.6\nadjCV          452    351.6    352.7    354.4    352.1    347.6    342.7\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       345.5    347.7    349.6     351.4     352.1     353.5     358.2\nadjCV    344.7    346.7    348.5     350.1     350.7     352.0     356.5\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        349.7     349.4     339.9     341.6     339.2     339.6\nadjCV     348.0     347.7     338.2     339.7     337.2     337.6\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         38.31    60.16    70.84    79.03    84.29    88.63    92.26    94.96\nSalary    40.63    41.58    42.17    43.22    44.90    46.48    46.69    46.75\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         96.28     97.26     97.98     98.65     99.15     99.47     99.75\nSalary    46.86     47.76     47.82     47.85     48.10     50.40     50.55\n        16 comps  17 comps  18 comps  19 comps\nX          99.89     99.97     99.99    100.00\nSalary     53.01     53.85     54.61     54.61\n```\n:::\n:::\n\n\nThe CV score is provided for each possible number of components, ranging\nfrom $M=0$ onwards. (We have printed the CV output only up to $M=4$.)\nNote that  `pcr()` reports the *root mean squared error*; in order to obtain the usual MSE, we must square this quantity. For instance, a root mean squared error of $352.8$ corresponds to an MSE of\n$352.8^2=124{,}468$.\n\nOne can also plot the cross-validation scores using the\n`validationplot()` function. Using `val.type = \"MSEP\"`\nwill cause the cross-validation MSE to be plotted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalidationplot(pcr.fit, val.type = \"MSEP\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk44-1.png){width=672}\n:::\n:::\n\n\nWe see that the smallest cross-validation error occurs when $M=18$ components are used. This is barely fewer than $M=19$, which amounts to simply performing least squares, because when all of the components are used in PCR no dimension reduction occurs. However, from the plot we also see that the cross-validation error is roughly the same when only one component is included in the model. This suggests that a model that uses just a small number of components might suffice.\n\n The\n`summary()` function also provides the *percentage of variance explained* in the predictors and in the response using different numbers of components. This concept is discussed in greater detail in Chapter 12.\n   Briefly, we can think of this as\nthe amount of information about the predictors or the\nresponse that is captured using $M$ principal components. For example,\nsetting $M=1$ only captures $38.31\\,\\%$ of all the variance, or information,\nin the predictors. In contrast, using $M=5$ increases the value to $84.29\\,\\%$. If we\nwere to use all $M=p=19$ components, this would increase to $100\\,\\%$.\n\n\nWe now\nperform PCR on the training data and evaluate its test set performance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\npcr.fit <- pcr(Salary ~ ., data = Hitters, subset = train,\n    scale = TRUE, validation = \"CV\")\nvalidationplot(pcr.fit, val.type = \"MSEP\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk45-1.png){width=672}\n:::\n:::\n\n\nNow we find that the lowest cross-validation error occurs when $M=5$ components are used.\nWe compute the test MSE as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcr.pred <- predict(pcr.fit, x[test, ], ncomp = 5)\nmean((pcr.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 142811.8\n```\n:::\n:::\n\n\nThis test set MSE is competitive with the results obtained using ridge regression and the lasso. However, as a result of the way PCR is implemented, the final model is more difficult to interpret because it does not perform any kind of variable selection or even directly produce coefficient estimates.\n\nFinally, we fit PCR on the full data set, using $M=5$, the number of components identified by cross-validation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcr.fit <- pcr(y ~ x, scale = TRUE, ncomp = 5)\nsummary(pcr.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 263 19 \n\tY dimension: 263 1\nFit method: svdpc\nNumber of components considered: 5\nTRAINING: % variance explained\n   1 comps  2 comps  3 comps  4 comps  5 comps\nX    38.31    60.16    70.84    79.03    84.29\ny    40.63    41.58    42.17    43.22    44.90\n```\n:::\n:::\n\n\n\n\n\n\n### Partial Least Squares\n\n\nWe implement partial least squares (PLS) using the `plsr()` function, also in the `pls` library. The syntax is just like that of the `pcr()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\npls.fit <- plsr(Salary ~ ., data = Hitters, subset = train, scale = TRUE, validation = \"CV\")\nsummary(pls.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 131 19 \n\tY dimension: 131 1\nFit method: kernelpls\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           428.3    325.5    329.9    328.8    339.0    338.9    340.1\nadjCV        428.3    325.0    328.2    327.2    336.6    336.1    336.6\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       339.0    347.1    346.4     343.4     341.5     345.4     356.4\nadjCV    336.2    343.4    342.8     340.2     338.3     341.8     351.1\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        348.4     349.1     350.0     344.2     344.5     345.0\nadjCV     344.2     345.0     345.9     340.4     340.6     341.1\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         39.13    48.80    60.09    75.07    78.58    81.12    88.21    90.71\nSalary    46.36    50.72    52.23    53.03    54.07    54.77    55.05    55.66\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         93.17     96.05     97.08     97.61     97.97     98.70     99.12\nSalary    55.95     56.12     56.47     56.68     57.37     57.76     58.08\n        16 comps  17 comps  18 comps  19 comps\nX          99.61     99.70     99.95    100.00\nSalary     58.17     58.49     58.56     58.62\n```\n:::\n\n```{.r .cell-code}\nvalidationplot(pls.fit, val.type = \"MSEP\")\n```\n\n::: {.cell-output-display}\n![](lm-selection_files/figure-html/chunk48-1.png){width=672}\n:::\n:::\n\n\nThe lowest cross-validation error occurs when only $M=1$ partial least squares directions are used. We now evaluate the corresponding test set MSE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npls.pred <- predict(pls.fit, x[test, ], ncomp = 1)\nmean((pls.pred - y.test)^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 151995.3\n```\n:::\n:::\n\n\nThe test MSE is comparable to, but slightly higher than, the test MSE obtained using ridge regression, the lasso, and PCR.\n\nFinally, we perform PLS using the full data set, using $M=1$, the number of components identified by cross-validation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npls.fit <- plsr(Salary ~ ., data = Hitters, scale = TRUE,\n    ncomp = 1)\nsummary(pls.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 263 19 \n\tY dimension: 263 1\nFit method: kernelpls\nNumber of components considered: 1\nTRAINING: % variance explained\n        1 comps\nX         38.08\nSalary    43.05\n```\n:::\n:::\n\n\nNotice that the percentage of variance in `Salary` that the one-component PLS fit explains, $43.05\\,\\%$, is almost as much as that explained using the final five-component model PCR fit, $44.90\\,\\%$. This is because PCR only attempts to maximize the amount of variance explained in the predictors, while PLS searches for directions that explain variance in both the predictors and the response.\n \n\n\n",
    "supporting": [
      "lm-selection_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}