{
  "hash": "de40cb6b2cf1f5290958b03d999e2fcb",
  "result": {
    "markdown": "---\ntitle: \"Objective 3\"\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"../utils.R\")\n```\n:::\n\n\n\n## Model Selection\n\nCourse Objective:\n\n> Conduct model selection for a set of candidate models\n\n## Mini-Project: World Happiness Report\n\nDataset: <https://worldhappiness.report/ed/2022/>\n\n\n::: {.cell}\n\n:::\n\n\nImport data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHappiness <- read.csv(\"../data/happiness_report_2022.csv\")\n\nstr(Happiness)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t147 obs. of  12 variables:\n $ RANK                                      : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country                                   : chr  \"Finland\" \"Denmark\" \"Iceland\" \"Switzerland\" ...\n $ Happiness.score                           : num  7.82 7.64 7.56 7.51 7.42 ...\n $ Whisker.high                              : num  7.89 7.71 7.65 7.59 7.47 ...\n $ Whisker.low                               : num  7.76 7.56 7.46 7.44 7.36 ...\n $ Dystopia..1.83....residual                : num  2.52 2.23 2.32 2.15 2.14 ...\n $ Explained.by..GDP.per.capita              : num  1.89 1.95 1.94 2.03 1.95 ...\n $ Explained.by..Social.support              : num  1.26 1.24 1.32 1.23 1.21 ...\n $ Explained.by..Healthy.life.expectancy     : num  0.775 0.777 0.803 0.822 0.787 0.79 0.803 0.786 0.818 0.752 ...\n $ Explained.by..Freedom.to.make.life.choices: num  0.736 0.719 0.718 0.677 0.651 0.7 0.724 0.728 0.568 0.68 ...\n $ Explained.by..Generosity                  : num  0.109 0.188 0.27 0.147 0.271 0.12 0.218 0.217 0.155 0.245 ...\n $ Explained.by..Perceptions.of.corruption   : num  0.534 0.532 0.191 0.461 0.419 0.388 0.512 0.474 0.143 0.483 ...\n```\n:::\n:::\n\n\nLets rename the columns, for sake of simplicity:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames (Happiness) <-\n  c(\n    \"Happiness.Rank\",\n    \"Country\",\n    \"Happiness.Score\",\n    \"Whisker.High\",\n    \"Whisker.Low\",\n    \"Dystopia.Residual\",\n    \"Economy\",\n    \"Family\",\n    \"Life.Expectancy\",\n    \"Freedom\",\n    \"Generosity\",\n    \"Trust\"\n  )\n\nstr(Happiness)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t147 obs. of  12 variables:\n $ Happiness.Rank   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country          : chr  \"Finland\" \"Denmark\" \"Iceland\" \"Switzerland\" ...\n $ Happiness.Score  : num  7.82 7.64 7.56 7.51 7.42 ...\n $ Whisker.High     : num  7.89 7.71 7.65 7.59 7.47 ...\n $ Whisker.Low      : num  7.76 7.56 7.46 7.44 7.36 ...\n $ Dystopia.Residual: num  2.52 2.23 2.32 2.15 2.14 ...\n $ Economy          : num  1.89 1.95 1.94 2.03 1.95 ...\n $ Family           : num  1.26 1.24 1.32 1.23 1.21 ...\n $ Life.Expectancy  : num  0.775 0.777 0.803 0.822 0.787 0.79 0.803 0.786 0.818 0.752 ...\n $ Freedom          : num  0.736 0.719 0.718 0.677 0.651 0.7 0.724 0.728 0.568 0.68 ...\n $ Generosity       : num  0.109 0.188 0.27 0.147 0.271 0.12 0.218 0.217 0.155 0.245 ...\n $ Trust            : num  0.534 0.532 0.191 0.461 0.419 0.388 0.512 0.474 0.143 0.483 ...\n```\n:::\n:::\n\n\nSelect only required variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHappiness <- Happiness %>% select(Country, Happiness.Rank, Happiness.Score, Economy, Family, Life.Expectancy, Freedom, Generosity, Trust, Dystopia.Residual)\nstr(Happiness)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t147 obs. of  10 variables:\n $ Country          : chr  \"Finland\" \"Denmark\" \"Iceland\" \"Switzerland\" ...\n $ Happiness.Rank   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Happiness.Score  : num  7.82 7.64 7.56 7.51 7.42 ...\n $ Economy          : num  1.89 1.95 1.94 2.03 1.95 ...\n $ Family           : num  1.26 1.24 1.32 1.23 1.21 ...\n $ Life.Expectancy  : num  0.775 0.777 0.803 0.822 0.787 0.79 0.803 0.786 0.818 0.752 ...\n $ Freedom          : num  0.736 0.719 0.718 0.677 0.651 0.7 0.724 0.728 0.568 0.68 ...\n $ Generosity       : num  0.109 0.188 0.27 0.147 0.271 0.12 0.218 0.217 0.155 0.245 ...\n $ Trust            : num  0.534 0.532 0.191 0.461 0.419 0.388 0.512 0.474 0.143 0.483 ...\n $ Dystopia.Residual: num  2.52 2.23 2.32 2.15 2.14 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHappiness$Continent <- NA\n\nHappiness$Continent[which(Happiness$Country %in% get_countries_by_continent(continent =\n                                                                              \"asia\"))] <- \"Asia\"\n\nHappiness$Continent[which(Happiness$Country %in% get_countries_by_continent(continent =\n                                                                              \"europe\"))] <- \"Europe\"\nHappiness$Continent[which(Happiness$Country %in% get_countries_by_continent(continent =\n                                                                              \"north america\"))] <- \"North America\"\nHappiness$Continent[which(Happiness$Country %in% get_countries_by_continent(continent =\n                                                                              \"south america\"))] <- \"South America\"\nHappiness$Continent[which(Happiness$Country %in% get_countries_by_continent(continent =\n                                                                              \"australia\"))] <-\n  \"Australia\"\nHappiness$Continent[which(is.na(Happiness$Continent))] <- \"Africa\"\n\n# Moving the continent column's position in the dataset to the second column\n\nHappiness <- Happiness %>% select(Country, Continent, everything())\n\n# Changing Continent column to factor\n\nHappiness$Continent <- as.factor(Happiness$Continent)\nHappiness$Country <- as.factor(Happiness$Country)\nstr(Happiness)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t147 obs. of  11 variables:\n $ Country          : Factor w/ 147 levels \"Afghanistan\",..: 41 33 54 126 95 78 125 102 60 96 ...\n $ Continent        : Factor w/ 6 levels \"Africa\",\"Asia\",..: 4 4 4 4 4 1 4 4 2 3 ...\n $ Happiness.Rank   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Happiness.Score  : num  7.82 7.64 7.56 7.51 7.42 ...\n $ Economy          : num  1.89 1.95 1.94 2.03 1.95 ...\n $ Family           : num  1.26 1.24 1.32 1.23 1.21 ...\n $ Life.Expectancy  : num  0.775 0.777 0.803 0.822 0.787 0.79 0.803 0.786 0.818 0.752 ...\n $ Freedom          : num  0.736 0.719 0.718 0.677 0.651 0.7 0.724 0.728 0.568 0.68 ...\n $ Generosity       : num  0.109 0.188 0.27 0.147 0.271 0.12 0.218 0.217 0.155 0.245 ...\n $ Trust            : num  0.534 0.532 0.191 0.461 0.419 0.388 0.512 0.474 0.143 0.483 ...\n $ Dystopia.Residual: num  2.52 2.23 2.32 2.15 2.14 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHappiness <- na.omit(Happiness) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNum.cols <- sapply(Happiness, is.numeric)\nCor.data <- cor(Happiness[, Num.cols])\ncorrplot::corrplot(Cor.data,method = 'color', order = 'alphabet')  \n```\n\n::: {.cell-output-display}\n![](objective-3_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(631)\ndataset <- Happiness[4:11]\nsplit = sample.split(dataset$Happiness.Score, SplitRatio = 0.8)\ntraining_set = subset(dataset, split == TRUE)\ntest_set = subset(dataset, split == FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_lm = lm(formula = Happiness.Score ~ .,\n              data = training_set)\n\ny_pred_lm = predict(model_lm, newdata = test_set)\npred_actual_lm <- as.data.frame(cbind(Prediction = y_pred_lm, Actual = test_set$Happiness.Score))\nplot_lm <- ggplot(pred_actual_lm, aes(Actual, Prediction)) +\n  geom_point() + theme_bw() + geom_abline() +\n  labs(title = \"Multiple Linear Regression\", x = \"Actual Score\",\n       y = \"Predicted Score\") +\n  theme(\n    plot.title = element_text(\n      size = (10)\n    ),\n    axis.title = element_text(size = (8))\n  )\n\nsummary(model_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Happiness.Score ~ ., data = training_set)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-2.236e-03 -4.755e-04 -1.101e-05  3.935e-04  2.131e-03 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)       8.348e-06  4.171e-04    0.02    0.984    \nEconomy           1.000e+00  3.264e-04 3065.38   <2e-16 ***\nFamily            1.000e+00  4.034e-04 2479.45   <2e-16 ***\nLife.Expectancy   9.992e-01  7.181e-04 1391.46   <2e-16 ***\nFreedom           1.000e+00  6.485e-04 1542.25   <2e-16 ***\nGenerosity        1.000e+00  1.004e-03  996.32   <2e-16 ***\nTrust             9.983e-01  6.447e-04 1548.30   <2e-16 ***\nDystopia.Residual 9.998e-01  1.432e-04 6983.96   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.000773 on 108 degrees of freedom\nMultiple R-squared:      1,\tAdjusted R-squared:      1 \nF-statistic: 3.293e+07 on 7 and 108 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_svm = e1071::svm(\n  formula = Happiness.Score ~ .,\n  data = dataset,\n  type = 'eps-regression',\n  kernel = 'radial'\n)\ny_pred_svm = predict(model_svm,  newdata = test_set)\npred_actual_svm <- as.data.frame(cbind(Prediction = y_pred_svm, Actual = test_set$Happiness.Score))\npred_actual_svm.versus.svm <- cbind(Prediction.lm = y_pred_lm, Prediction.svm = y_pred_svm, Actual = test_set$Happiness.Score)\n\nplot_svm <- ggplot(pred_actual_svm, aes(Actual, Prediction )) +\n  geom_point() + theme_bw() + geom_abline() +\n  labs(title = \"Support Vector Machine\", x = \"Actual Score\",\n       y = \"Predicted Score\") +\n  theme(plot.title = element_text(size = (10)), \n        axis.title = element_text(size = (8)))\n\nsummary(model_svm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsvm(formula = Happiness.Score ~ ., data = dataset, type = \"eps-regression\", \n    kernel = \"radial\")\n\n\nParameters:\n   SVM-Type:  eps-regression \n SVM-Kernel:  radial \n       cost:  1 \n      gamma:  0.1428571 \n    epsilon:  0.1 \n\n\nNumber of Support Vectors:  55\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_dt = rpart::rpart(formula = Happiness.Score ~ .,\n                 data = dataset,\n                 control = rpart.control(minsplit = 10))\n\ny_pred_dt = predict(model_dt, newdata = test_set)\n\npred_actual_dt <-\n  as.data.frame(cbind(Prediction = y_pred_dt, Actual = test_set$Happiness.Score))\n\n\nplot_dt <- ggplot(pred_actual_dt, aes(Actual, Prediction)) +\n  geom_point() + theme_bw() + geom_abline() +\n  labs(title = \"Decision Tree\", x = \"Actual Score\",\n       y = \"Predicted Score\") +\n  theme(plot.title = element_text(size = (10)),\n        axis.title = element_text(size = (8)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrpart.plot(model_dt)\n```\n\n::: {.cell-output-display}\n![](objective-3_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_nn <-\n  neuralnet::neuralnet(\n    Happiness.Score ~ Economy + Family + Life.Expectancy + Freedom + Generosity + Trust + Dystopia.Residual,\n    data = training_set,\n    hidden = 10,\n    linear.output = TRUE\n  )\n\npredicted.nn.values <- compute(model_nn, test_set[, 2:8])\n\npred_actual_nn <-\n  as.data.frame(\n    cbind(\n      Prediction = predicted.nn.values$net.result,\n      Actual = test_set$Happiness.Score\n    )\n  )\n\nplot_nn <- ggplot(pred_actual_nn, aes(Actual, V1)) +\n  geom_point() + theme_bw() + geom_abline() +\n  labs(title = \"Neural Network\", x = \"Actual Score\",\n       y = \"Predicted Score\") +\n  theme(plot.title = element_text(size = (10)),\n        axis.title = element_text(size = (8)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model_nn)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_performance <- data.frame(\n  Model.Name = c(\n    \"Muliple Linear Regression\",\n    \"Support Vector Machine\",\n    \"Decision Tree\",\n    \"Neural Network\"\n  ),\n  RMSE <- c(\n    Metrics::rmse(pred_actual_lm$Actual, pred_actual_lm$Prediction),\n    Metrics::rmse(pred_actual_svm$Actual, pred_actual_svm$Prediction),\n    Metrics::rmse(pred_actual_dt$Actual, pred_actual_dt$Prediction),\n    Metrics::rmse(pred_actual_nn$Actual, pred_actual_nn$V1)\n  )\n)\ncolnames(model_performance) <- c(\"Model.Name\", \"RMSE\")\nmodel_performance %>% kable()\n```\n\n::: {.cell-output-display}\n|Model.Name                |      RMSE|\n|:-------------------------|---------:|\n|Muliple Linear Regression | 0.0008959|\n|Support Vector Machine    | 0.1077064|\n|Decision Tree             | 0.3817205|\n|Neural Network            | 0.0316960|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(plot_lm,\n          plot_svm,\n          plot_dt,\n          plot_nn,\n          ncol = 2,\n          nrow = 2)\n```\n\n::: {.cell-output-display}\n![](objective-3_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "objective-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}